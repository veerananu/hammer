terraform {
  required_version = ">= 1.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-west-2"  # adjust as needed
}

# ——————————————————————————
# | VARIABLES
# ——————————————————————————
variable "connect_alias" {
  description = "Alias of your existing Amazon Connect instance"
  type        = string
  default     = "kuttyvisu"   # ← replace with your real alias
}

# ——————————————————————————
# | DATA LOOKUPS
# ——————————————————————————

# Fetch the Connect instance by alias
data "aws_connect_instance" "existing" {
  instance_alias = var.connect_alias
}

# Fetch the default hours of operation named "Basic Hours"
data "aws_connect_hours_of_operation" "default" {
  instance_id = data.aws_connect_instance.existing.id
  name        = "Basic Hours"
}

# ——————————————————————————
# | AMAZON CONNECT MODULE
# ——————————————————————————

module "amazon_connect" {
  source  = "aws-ia/amazonconnect/aws"
  version = "~> 0.0.1"

  # ← Tell the module to use your existing instance, not create a new one
  create_instance = false

  # ← Dynamically inject the ID we just looked up
  instance_id     = data.aws_connect_instance.existing.id

  # Define a CHAT queue
  queues = {
    chat_support_queue = {
      description           = "Queue for chat support"
      hours_of_operation_id = data.aws_connect_hours_of_operation.default.hours_of_operation_id
      channel               = "CHAT"
    }
  }

  # Define a routing profile scoped to that queue
  routing_profiles = {
    chat_support_routing_profile = {
      description               = "Routing profile for chat support agents"
      default_outbound_queue_id = module.amazon_connect.queues["chat_support_queue"].queue_id

      # Tie in your CHAT queue
      queue_configs = [
        {
          channel   = "CHAT"
          delay     = 0
          priority  = 1
          queue_id  = module.amazon_connect.queues["chat_support_queue"].queue_id
        }
      ]

      # Allow agents to handle up to 5 simultaneous chats
      media_concurrencies = [
        {
          channel     = "CHAT"
          concurrency = 5
        }
      ]
    }
  }
}

# ——————————————————————————
# | OPTIONAL OUTPUTS
# ——————————————————————————
output "connect_instance_id" {
  description = "The ID of the existing Amazon Connect instance"
  value       = data.aws_connect_instance.existing.id
}

output "chat_queue_id" {
  description = "The ID of the CHAT queue created"
  value       = module.amazon_connect.queues["chat_support_queue"].queue_id
}

output "routing_profile_id" {
  description = "The ID of the CHAT routing profile"
  value       = module.amazon_connect.routing_profiles["chat_support_routing_profile"].routing_profile_id
}


variable "cmk_queue_arn" {
  description = "ARN of the Amazon Connect queue used when CMK is open"
  type        = string
  default = ""
}
# Define the DynamoDB table with production-ready features
# DynamoDB table definition
resource "aws_dynamodb_table" "operating_hours" {
  name         = "OperatingHours"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "entityId"

  attribute {
    name = "entityId"
    type = "S"
  }

  server_side_encryption {
    enabled = true
  }

  point_in_time_recovery {
    enabled = true
  }

  deletion_protection_enabled = true

  tags = {
    Environment = "Development"
    Project     = "OperatingHours"
  }
}

# Local variable for operating hours data
locals {
  operating_hours_data = {
    "CMK" = {
      queueArn = var.cmk_queue_arn
      hours = {
        Monday    = { openTime = "09:00", closeTime = "17:00" }
        Tuesday   = { openTime = "09:00", closeTime = "17:00" }
        Wednesday = { openTime = "09:00", closeTime = "17:00" }
        Thursday  = { openTime = "09:00", closeTime = "17:00" }
        Friday    = { openTime = "09:00", closeTime = "17:00" }
        Saturday  = { openTime = "00:00", closeTime = "00:00" } # closed
        Sunday    = { openTime = "00:00", closeTime = "00:00" } # closed
      }
    }
  }
}

# Seed the table with operating hours data
resource "aws_dynamodb_table_item" "hours" {
  for_each   = local.operating_hours_data
  table_name = aws_dynamodb_table.operating_hours.name
  hash_key   = aws_dynamodb_table.operating_hours.hash_key

  item = jsonencode({
    entityId        = { S = each.key }
     queueArn  = { S = each.value.queueArn }
    operatingHours  = { M = {
      for day, times in each.value.hours : day => { M = {
        openTime  = { S = times.openTime }
        closeTime = { S = times.closeTime }
      }}
    }}
  })
}



// cmd/check-hours/main.go
package main

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/aws/aws-lambda-go/lambda"
	"go.uber.org/zap"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

/* ───── Amazon Connect wrapper types ───── */

type connectEvent struct{} // request body unused

type connectResp struct {
	IsOpen bool   `json:"isOpen"`
	Queue  string `json:"queue,omitempty"` // returned only when open AND queueArn present
	Msg    string `json:"msg,omitempty"`   // diagnostic text for logs / testing
}

/* ─────────── Globals ─────────── */

var (
	ddb       *dynamodb.Client
	tableName = "OperatingHours"
	entityID  = "CMK"                           // single fixed record (can be changed later)
	centralTZ = time.FixedZone("CST", -6*60*60) // UTC-06:00, no DST
	log       *zap.SugaredLogger
)

/* ─────────── init() ─────────── */

func init() {
	zl, err := zap.NewProduction()
	if err != nil {
		panic(err)
	}
	log = zl.Sugar()

	cfg, err := config.LoadDefaultConfig(context.Background())
	if err != nil {
		log.Fatalf("load AWS cfg: %v", err)
	}
	ddb = dynamodb.NewFromConfig(cfg)
}

/* ─────────── Handler ─────────── */

func handler(ctx context.Context, _ connectEvent) (connectResp, error) {

	/*   Fetch the row */
	out, err := ddb.GetItem(ctx, &dynamodb.GetItemInput{
		TableName: aws.String(tableName),
		Key: map[string]types.AttributeValue{
			"entityId": &types.AttributeValueMemberS{Value: entityID},
		},
	})
	if err != nil {
		log.Errorw("dynamodb get failed", "error", err)
		return connectResp{IsOpen: false, Msg: "dynamodb error"}, nil
	}
	if out.Item == nil {
		log.Infow("entityId not found", "entityId", entityID)
		return connectResp{IsOpen: false, Msg: "no such entity"}, nil
	}

	/*   Unmarshal operatingHours + queueArn */
	var row struct {
		QueueArn       string `dynamodbav:"queueArn"`
		OperatingHours map[string]struct {
			OpenTime  string `dynamodbav:"openTime"`
			CloseTime string `dynamodbav:"closeTime"`
		} `dynamodbav:"operatingHours"`
	}
	if err := attributevalue.UnmarshalMap(out.Item, &row); err != nil {
		log.Errorw("unmarshal failed", "error", err)
		return connectResp{IsOpen: false, Msg: "unmarshal error"}, nil
	}

	/*   Resolve “now” (or FORCE_TIME for repeatable tests) */
	now := time.Now().UTC().In(centralTZ)
	if ts := os.Getenv("FORCE_TIME"); ts != "" {
		if t, err := time.ParseInLocation(time.RFC3339, ts, centralTZ); err == nil {
			now = t
		} else {
			log.Warnw("bad FORCE_TIME value", "error", err)
		}
	}
	day := now.Weekday().String()

	/*   No hours today → closed */
	today, ok := row.OperatingHours[day]
	if !ok || (today.OpenTime == "00:00" && today.CloseTime == "00:00") {
		return connectResp{IsOpen: false}, nil
	}

	/*   Compare times */
	openT, err1 := time.ParseInLocation("15:04", today.OpenTime, centralTZ)
	closeT, err2 := time.ParseInLocation("15:04", today.CloseTime, centralTZ)
	if err1 != nil || err2 != nil {
		log.Errorw("bad time format", "open", today.OpenTime, "close", today.CloseTime)
		return connectResp{IsOpen: false, Msg: "bad time format"}, nil
	}
	openT = time.Date(now.Year(), now.Month(), now.Day(),
		openT.Hour(), openT.Minute(), 0, 0, centralTZ)
	closeT = time.Date(now.Year(), now.Month(), now.Day(),
		closeT.Hour(), closeT.Minute(), 0, 0, centralTZ)

	isOpen := !now.Before(openT) && now.Before(closeT)

	/*   Build response */
	if !isOpen {
		return connectResp{IsOpen: false}, nil
	}
	if row.QueueArn == "" {
		// open but no queue configured – treat as error / closed
		log.Warnw("row has no queueArn", "entityId", entityID)
		return connectResp{IsOpen: false, Msg: "no queueArn configured"}, nil
	}
	return connectResp{
		IsOpen: true,
		Queue:  row.QueueArn,
	}, nil
}

/* ─────────── Helpers for local testing ─────────── */

func (r connectResp) String() string {
	b, _ := json.MarshalIndent(r, "", "  ")
	return string(b)
}

func runLocal() {
	var ev connectEvent
	_ = json.NewDecoder(bufio.NewReader(os.Stdin)).Decode(&ev) // accept empty input
	resp, err := handler(context.Background(), ev)
	if err != nil {
		log.Fatalf("handler err: %v", err)
	}
	fmt.Println(resp.String())
}

/* ─────────── main() ─────────── */

func main() {
	if os.Getenv("LOCAL_TEST") == "true" {
		runLocal()
		return
	}
	lambda.Start(handler)
}
