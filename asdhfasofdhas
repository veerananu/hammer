package secrets

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
)

type secretCache struct {
	value     string
	expiresAt time.Time
}

var (
	cache      = make(map[string]secretCache)
	cacheTTL   = 2 * time.Minute
	cacheMutex sync.RWMutex
)

func GetSecret(ctx context.Context, name string) (string, error) {
	cacheMutex.RLock()
	entry, ok := cache[name]
	cacheMutex.RUnlock()

	if ok && time.Now().Before(entry.expiresAt) {
		log.Println("cache_hit")
		return entry.value, nil
	}

	log.Println("cache_miss")

	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return "", fmt.Errorf("load SDK config: %w", err)
	}

	svc := secretsmanager.NewFromConfig(cfg)
	out, err := svc.GetSecretValue(ctx, &secretsmanager.GetSecretValueInput{
		SecretId: &name,
	})
	if err != nil {
		return "", fmt.Errorf("get secret: %w", err)
	}

	if out.SecretString == nil {
		return "", fmt.Errorf("secret %q has no string value", name)
	}

	var secretMap map[string]string
	if err := json.Unmarshal([]byte(*out.SecretString), &secretMap); err != nil {
		return "", fmt.Errorf("parse secret JSON: %w", err)
	}

	secret, exists := secretMap[name]
	if !exists {
		return "", fmt.Errorf("key %q not found in secret", name)
	}

	cacheMutex.Lock()
	cache[name] = secretCache{
		value:     secret,
		expiresAt: time.Now().Add(cacheTTL),
	}
	cacheMutex.Unlock()

	return secret, nil
}
---------------------------------

package main

import (
	"context"
	"io"
	"log"
	"my-lambda-project/internal/config"
	"my-lambda-project/internal/metrics"
	"my-lambda-project/internal/s3"
	"my-lambda-project/internal/secrets"
	"my-lambda-project/internal/sender"
	"os"
	"time"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	jsoniter "github.com/json-iterator/go"
	awsS3 "github.com/aws/aws-sdk-go/service/s3"
)

var jsonLib = jsoniter.ConfigCompatibleWithStandardLibrary
var s3FailureCount int

func handler(ctx context.Context, s3Event events.S3Event) error {
	cfg := config.Load()

	// ✅ CHANGE HERE: Fetch secret at the start of the handler
	secretName := os.Getenv("SECRET_NAME")
	if secretName == "" {
		secretName = "my-secret"
	}

	secretValue, err := secrets.GetSecret(ctx, secretName)
	if err != nil {
		log.Printf("Failed to fetch secret: %v", err)
		return err
	}

	log.Printf("Fetched secret successfully")

	s3Client, err := s3.GetClient()
	if err != nil {
		log.Printf("Failed to initialize S3 client: %v", err)
		return err
	}

	for _, record := range s3Event.Records {
		bucket := record.S3.Bucket.Name
		key := record.S3.Object.Key

		resp, err := s3Client.GetObjectWithContext(ctx, &awsS3.GetObjectInput{
			Bucket: &bucket,
			Key:    &key,
		})
		if err != nil {
			log.Printf("Failed to get object %s from bucket %s: %v", key, bucket, err)
			s3FailureCount++
			continue
		}
		defer resp.Body.Close()

		inputData, err := io.ReadAll(resp.Body)
		if err != nil {
			log.Printf("Failed to read object %s: %v", key, err)
			s3FailureCount++
			continue
		}

		var inputs []metrics.InputMetric
		if err := jsonLib.Unmarshal(inputData, &inputs); err != nil {
			log.Printf("Error parsing JSON: %v", err)
			continue
		}

		resultChan := make(chan metrics.ResourceMetrics, cfg.ResultChanSize)
		flushInterval := 10 * time.Second

		// ✅ CHANGE HERE: Pass secretValue to sender
		batchChan, done := sender.Sender(ctx, resultChan, cfg, cfg.BatchSize, flushInterval, secretValue)
		workersDone := sender.StartWorkers(ctx, batchChan, cfg, cfg.NumWorkers)

		startTime := time.Now()
		metrics.ConvertToOTEL(ctx, inputs, resultChan)
		log.Printf("Processed %d metrics. Time taken: %v. Failed S3 records: %d", len(inputs), time.Since(startTime), s3FailureCount)

		<-done
		<-workersDone

		err = s3.AddObjectTag(s3Client, bucket, key)
		if err != nil {
			log.Printf("Error updating object status for %s/%s: %v", bucket, key, err)
		} else {
			log.Printf("Successfully updated object status for %s/%s", bucket, key)
		}
	}
	return nil
}

func main() {
	lambda.Start(handler)
}

------------------------
package sender

import (
	"bytes"
	"context"
	"encoding/json"
	"log"
	"my-lambda-project/internal/config"
	"my-lambda-project/internal/metrics"
	"net/http"
	"time"
)

// ✅ CHANGE HERE: Add secret parameter
func Sender(ctx context.Context, inputChan <-chan metrics.ResourceMetrics, cfg *config.Config, batchSize int, flushInterval time.Duration, secret string) (chan []metrics.ResourceMetrics, chan struct{}) {
	batchChan := make(chan []metrics.ResourceMetrics, cfg.BatchChanSize)
	done := make(chan struct{})

	go func() {
		defer close(batchChan)
		defer close(done)

		batch := make([]metrics.ResourceMetrics, 0, batchSize)
		timer := time.NewTimer(flushInterval)

		for {
			select {
			case metric, ok := <-inputChan:
				if !ok {
					if len(batch) > 0 {
						batchChan <- batch
					}
					return
				}
				batch = append(batch, metric)
				if len(batch) >= batchSize {
					batchChan <- batch
					batch = make([]metrics.ResourceMetrics, 0, batchSize)
					if !timer.Stop() {
						<-timer.C
					}
					timer.Reset(flushInterval)
				}
			case <-timer.C:
				if len(batch) > 0 {
					batchChan <- batch
					batch = make([]metrics.ResourceMetrics, 0, batchSize)
				}
				timer.Reset(flushInterval)
			}
		}
	}()

	// ✅ CHANGE HERE: Use secret in HTTP request
	go func() {
		client := &http.Client{}
		for batch := range batchChan {
			payload, err := json.Marshal(batch)
			if err != nil {
				log.Printf("Failed to marshal batch: %v", err)
				continue
			}

			req, err := http.NewRequest("POST", cfg.OTELEndpoint, bytes.NewBuffer(payload))
			if err != nil {
				log.Printf("Failed to create request: %v", err)
				continue
			}

			req.Header.Set("Authorization", "Bearer "+secret)
			req.Header.Set("Content-Type", "application/json")

			resp, err := client.Do(req)
			if err != nil {
				log.Printf("Failed to send batch: %v", err)
				continue
			}
			resp.Body.Close()

			if resp.StatusCode != http.StatusOK {
				log.Printf("Unexpected response status: %s", resp.Status)
			} else {
				log.Printf("Batch sent successfully")
			}
		}
	}()

	return batchChan, done
}
