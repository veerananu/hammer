Certainly! If you want to update an existing policy for a pre-existing AWS KMS key using Terraform, you need to manage the KMS key as a Terraform resource.
If the KMS key was not created by Terraform, but you know its key ID or ARN, you can use a aws_kms_key data source to reference it, then attach a policy using the aws_kms_key_policy resource.

Example: Updating KMS Key Policy for Existing Key
hcl
Copy
Edit
# Use data source to reference the existing KMS key by key_id or key_arn
data "aws_kms_key" "existing" {
  key_id = "arn:aws:kms:us-west-2:123456789012:key/abcd1234-56ef-78gh-90ij-klmnopqrstuv"
  # OR use the Key ID directly:
  # key_id = "abcd1234-56ef-78gh-90ij-klmnopqrstuv"
}

# Write the policy you want to apply
data "aws_iam_policy_document" "example" {
  statement {
    actions = [
      "kms:Encrypt",
      "kms:Decrypt"
    ]
    resources = ["*"]
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::123456789012:role/MyAppRole"]
    }
  }
  # You can add more statements as needed
}

# Attach (or replace) the policy for the existing KMS key
resource "aws_kms_key_policy" "update" {
  key_id = data.aws_kms_key.existing.key_id
  policy = data.aws_iam_policy_document.example.json
}
How It Works
data "aws_kms_key": Imports the existing key into your Terraform state (read-only reference).

data "aws_iam_policy_document": Composes your desired policy.

resource "aws_kms_key_policy": Applies (updates or replaces) the policy for the referenced key.

Important Notes
Terraform will manage the KMS policy from now on. If you change the policy in the AWS console, Terraform will attempt to reset it to what's in your code on the next apply.

Only one aws_kms_key_policy per key can exist in your Terraform configuration.

Applying the Code
Save the code in your .tf files.

Run terraform init.

Run terraform plan to preview changes.

Run terraform apply to update the policy.

If you want to append to the existing policy instead of replacing, you’ll have to import the existing policy (use a data source), merge it with your changes in the aws_iam_policy_document, then set it as above.

Let me know your exact scenario (region, key id, who/what should have access) if you want a more

--------------------

Absolutely! Here’s a full example Terraform script to update an existing AWS KMS key policy by adding a new IAM role, without removing the old permissions.

🟢 How to Use This Script
Export your existing KMS policy (if you don’t have it, follow the AWS CLI command below):

sh
Copy
Edit
aws kms get-key-policy --key-id <your-key-id> --policy-name default > policy.json
Copy each statement in your current policy to the Terraform code (as shown below).

Add a new statement block for your new role (or add your new role to an existing statement).

Assume:
KMS Key ARN: arn:aws:kms:us-west-2:123456789012:key/abcd1234-56ef-78gh-90ij-klmnopqrstuv

Old Role: arn:aws:iam::123456789012:role/OldRole

New Role: arn:aws:iam::123456789012:role/NewRole

Full Terraform Script
hcl
Copy
Edit
provider "aws" {
  region = "us-west-2"
}

data "aws_kms_key" "existing" {
  key_id = "arn:aws:kms:us-west-2:123456789012:key/abcd1234-56ef-78gh-90ij-klmnopqrstuv"
}

data "aws_iam_policy_document" "kms_policy" {
  # Copy your existing policy statements below

  statement {
    sid     = "EnableIAMUserPermissions"
    effect  = "Allow"
    actions = ["kms:*"]
    resources = ["*"]
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::123456789012:root"]
    }
  }

  statement {
    sid     = "AllowUseOfTheKey"
    effect  = "Allow"
    actions = [
      "kms:Encrypt",
      "kms:Decrypt"
    ]
    resources = ["*"]
    principals {
      type        = "AWS"
      identifiers = [
        "arn:aws:iam::123456789012:role/OldRole",
        "arn:aws:iam::123456789012:role/NewRole"   # <-- Add your new role here!
      ]
    }
  }

  # If you have more statements, paste them here!
}

resource "aws_kms_key_policy" "update" {
  key_id = data.aws_kms_key.existing.key_id
  policy = data.aws_iam_policy_document.kms_policy.json
}
What this does:
Preserves all your old permissions.

Adds a new role to the policy.

Updates the policy on your existing KMS key.

How to Apply
sh
Copy
Edit
terraform init
terraform plan
terraform apply
Summary
Terraform can only manage the full policy, so you must include all old and new permissions in your script.

This script will add the new role without removing any old permissions.

If your policy is more complex or you want to add a brand new statement (instead of adding to a list),
just paste your old policy here (anonymize if you want), and I’ll generate the exact code for you!









Ask ChatGPT
You said:
is there any option additional role adding it


ChatGPT said:
No, there is no “add only” or “append” option for KMS key policies using Terraform.

Here’s why:
AWS KMS key policies are single documents.
Each key has one policy, which is a JSON document containing all permissions.

Terraform’s aws_kms_key_policy always manages the entire document.
When you apply, it will overwrite the key’s policy with whatever is defined in your Terraform code.

There is no way to “just add” a role/statement using Terraform’s aws_kms_key_policy resource—you must provide the full, merged policy.

Why can’t you just add a new role with Terraform?
If you use only the new statement (for the new role), all old statements will be removed from the policy.

If you use both old + new statements in your code, both permissions are present (that’s the right way).

Is there any workaround?
No official Terraform workaround exists to “add” or “append” a role without restating the entire policy.

If you need a one-time update and don’t want Terraform to manage the policy, you can add a new statement manually in the AWS Console or via the AWS CLI.

But, once you let Terraform manage the policy, you must keep all desired statements in your Terraform code.

Summary Table
Method	What happens
AWS Console / CLI	You can add/append new statements as you like
Terraform	You must manage the full policy (old + new)

Bottom line:
Terraform = full policy only (old and new merged together).

No append/partial update possible.

If you want, share your current KMS policy and the ARN of the new role you want to add.
I will merge them and give you a ready-to-use Terraform script.











Tools



