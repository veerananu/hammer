terraform {
  required_version = ">= 1.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-west-2"  # adjust as needed
}

# ——————————————————————————
# | VARIABLES
# ——————————————————————————
variable "connect_alias" {
  description = "Alias of your existing Amazon Connect instance"
  type        = string
  default     = "kuttyvisu"   # ← replace with your real alias
}

# ——————————————————————————
# | DATA LOOKUPS
# ——————————————————————————

# Fetch the Connect instance by alias
data "aws_connect_instance" "existing" {
  instance_alias = var.connect_alias
}

# Fetch the default hours of operation named "Basic Hours"
data "aws_connect_hours_of_operation" "default" {
  instance_id = data.aws_connect_instance.existing.id
  name        = "Basic Hours"
}

# ——————————————————————————
# | AMAZON CONNECT MODULE
# ——————————————————————————

module "amazon_connect" {
  source  = "aws-ia/amazonconnect/aws"
  version = "~> 0.0.1"

  # ← Tell the module to use your existing instance, not create a new one
  create_instance = false

  # ← Dynamically inject the ID we just looked up
  instance_id     = data.aws_connect_instance.existing.id

  # Define a CHAT queue
  queues = {
    chat_support_queue = {
      description           = "Queue for chat support"
      hours_of_operation_id = data.aws_connect_hours_of_operation.default.hours_of_operation_id
      channel               = "CHAT"
    }
  }

  # Define a routing profile scoped to that queue
  routing_profiles = {
    chat_support_routing_profile = {
      description               = "Routing profile for chat support agents"
      default_outbound_queue_id = module.amazon_connect.queues["chat_support_queue"].queue_id

      # Tie in your CHAT queue
      queue_configs = [
        {
          channel   = "CHAT"
          delay     = 0
          priority  = 1
          queue_id  = module.amazon_connect.queues["chat_support_queue"].queue_id
        }
      ]

      # Allow agents to handle up to 5 simultaneous chats
      media_concurrencies = [
        {
          channel     = "CHAT"
          concurrency = 5
        }
      ]
    }
  }
}

# ——————————————————————————
# | OPTIONAL OUTPUTS
# ——————————————————————————
output "connect_instance_id" {
  description = "The ID of the existing Amazon Connect instance"
  value       = data.aws_connect_instance.existing.id
}

output "chat_queue_id" {
  description = "The ID of the CHAT queue created"
  value       = module.amazon_connect.queues["chat_support_queue"].queue_id
}

output "routing_profile_id" {
  description = "The ID of the CHAT routing profile"
  value       = module.amazon_connect.routing_profiles["chat_support_routing_profile"].routing_profile_id
}



# Define the DynamoDB table with production-ready features
# DynamoDB table definition
resource "aws_dynamodb_table" "operating_hours" {
  name         = "OperatingHours"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "entityId"

  attribute {
    name = "entityId"
    type = "S"
  }

  server_side_encryption {
    enabled = true
  }

  point_in_time_recovery {
    enabled = true
  }

  deletion_protection_enabled = true

  tags = {
    Environment = "Development"
    Project     = "OperatingHours"
  }
}

# Local variable for operating hours data
locals {
  operating_hours_data = {
    "CMK" = {
      hours = {
        Monday    = { openTime = "09:00", closeTime = "17:00" }
        Tuesday   = { openTime = "09:00", closeTime = "17:00" }
        Wednesday = { openTime = "09:00", closeTime = "17:00" }
        Thursday  = { openTime = "09:00", closeTime = "17:00" }
        Friday    = { openTime = "09:00", closeTime = "17:00" }
        Saturday  = { openTime = "00:00", closeTime = "00:00" } # closed
        Sunday    = { openTime = "00:00", closeTime = "00:00" } # closed
      }
    }
  }
}

# Seed the table with operating hours data
resource "aws_dynamodb_table_item" "hours" {
  for_each   = local.operating_hours_data
  table_name = aws_dynamodb_table.operating_hours.name
  hash_key   = aws_dynamodb_table.operating_hours.hash_key

  item = jsonencode({
    entityId        = { S = each.key }
    operatingHours  = { M = {
      for day, times in each.value.hours : day => { M = {
        openTime  = { S = times.openTime }
        closeTime = { S = times.closeTime }
      }}
    }}
  })
}
