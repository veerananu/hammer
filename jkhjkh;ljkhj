package config

import (
	"os"
	"strconv"
	"time"
)

const (
	// Default values
	DefaultNumWorkers     = 20
	DefaultBatchSize      = 200
	DefaultMaxRetries     = 3
	DefaultBackoff        = 1 * time.Second
	DefaultBackoffMult    = 2.0
	DefaultOTELEndpoint   = "http://167.71.85.187:4318/v1/metrics"
	DefaultResultChanSize = 1000
	DefaultBatchChanSize  = 50
	DefaultSecretName     = "my-secret"
)

// Config holds application configuration loaded from environment variables.
type Config struct {
	PrintJSON      bool
	NumWorkers     int
	BatchSize      int
	OTELEndpoint   string
	ResultChanSize int
	BatchChanSize  int
	MaxRetries     int
	Backoff        time.Duration
	BackoffMult    float64
	SecretName     string
	APIKey         string
}

// Load reads environment variables and returns a Config instance.
func Load() *Config {
	cfg := &Config{}

	// PRINT_JSON
	cfg.PrintJSON, _ = strconv.ParseBool(os.Getenv("PRINT_JSON"))

	// NUM_WORKERS
	if n, err := strconv.Atoi(os.Getenv("NUM_WORKERS")); err == nil && n > 0 {
		cfg.NumWorkers = n
	} else {
		cfg.NumWorkers = DefaultNumWorkers
	}

	// BATCH_SIZE
	if b, err := strconv.Atoi(os.Getenv("BATCH_SIZE")); err == nil && b > 0 {
		cfg.BatchSize = b
	} else {
		cfg.BatchSize = DefaultBatchSize
	}

	// OTEL_ENDPOINT
	if endpoint := os.Getenv("OTEL_ENDPOINT"); endpoint != "" {
		cfg.OTELEndpoint = endpoint
	} else {
		cfg.OTELEndpoint = DefaultOTELEndpoint
	}

	// RESULT_CHAN_SIZE
	if rcs, err := strconv.Atoi(os.Getenv("RESULT_CHAN_SIZE")); err == nil && rcs > 0 {
		cfg.ResultChanSize = rcs
	} else {
		cfg.ResultChanSize = DefaultResultChanSize
	}

	// BATCH_CHAN_SIZE
	if bcs, err := strconv.Atoi(os.Getenv("BATCH_CHAN_SIZE")); err == nil && bcs > 0 {
		cfg.BatchChanSize = bcs
	} else {
		cfg.BatchChanSize = DefaultBatchChanSize
	}

	// SECRET_NAME
	if secretName := os.Getenv("SECRET_NAME"); secretName != "" {
		cfg.SecretName = secretName
	} else {
		cfg.SecretName = DefaultSecretName
	}

	cfg.MaxRetries = DefaultMaxRetries
	cfg.Backoff = DefaultBackoff
	cfg.BackoffMult = DefaultBackoffMult

	return cfg
}
