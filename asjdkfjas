@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    return http
        .csrf(csrf -> csrf.disable())
        .sessionManagement(sessionManagement -> 
            sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .authorizeHttpRequests(authorize -> authorize
            .requestMatchers(AUTH_WHITELIST).permitAll()
            .anyRequest().hasAnyAuthority("EMPLOYEE"))
        .exceptionHandling(handler -> 
            handler.authenticationEntryPoint(unauthorizedEntryPoint))
        .authenticationProvider(usaAuthenticationProvider)
        .addFilterBefore(
            new UsaAuthenticationFilter(...),  // Your existing filter
            BasicAuthenticationFilter.class)
        .addFilterAfter(                       // ADD THIS - ONLY ONCE
            virtualThreadSecurityContextFilter,
            UsaAuthenticationFilter.class)
        .securityContext(securityContext -> securityContext
            .securityContextRepository(new RequestAttributeSecurityContextRepository()))
        .build();
}

package your.package.name; // Use your actual package name

import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class VirtualThreadSecurityContextFilter extends OncePerRequestFilter {
    
    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                  HttpServletResponse response,
                                  FilterChain filterChain) throws ServletException, IOException {
        
        SecurityContext contextBeforeVirtualThread = SecurityContextHolder.getContext();
        
        try {
            filterChain.doFilter(request, response);
        } finally {
            if (contextBeforeVirtualThread != null && 
                contextBeforeVirtualThread.getAuthentication() != null) {
                SecurityContextHolder.setContext(contextBeforeVirtualThread);
            }
        }
    }
}
